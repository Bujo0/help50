#!/usr/bin/env python
from __future__ import print_function
import io
import os
import signal
import subprocess
import sys
import textwrap

import requests
import termcolor


def main():
    # Return 1 on Ctrl-C.
    signal.signal(signal.SIGINT, lambda signum, frame: sys.exit(1))

    script = ""
    print("")

    # Non-interactive stdin
    if len(sys.argv) == 1:

        # Allow input via pipe, disallow interactive input (as potentially
        # confusing)
        if sys.stdin.isatty():
            print("Careful, you forgot to tell me"
                  "with which command you need help!")
            sys.exit(1)
        else:
            script = sys.stdin.read()

    # Interactive stdin
    elif len(sys.argv) == 2 and sys.argv[1] == "-i":
        script = sys.stdin.read()

    # Command
    else:
        # Capture stdout and stderr from process, and print it out.
        with io.StringIO() as iostr:
            tee(" ".join(sys.argv[1:]), iostr, sys.stdout)
            script = iostr.getvalue()

    termcolor.cprint("\nAsking for help...", "yellow", end="")
    sys.stdout.flush()

    data = {
        "cmd": " ".join(sys.argv[1:]),
        "format": "ans",
        "script": script,
        "username": os.environ.get("C9_USER")
    }

    # Read help50 url and from environment variable,
    # defaulting to help.cs50.net.
    app_url = os.environ.get("APP_URL") or "https://help.cs50.net/"

    # Read number of columns in terminal from environment variable, defaulting
    # to 100.
    columns = os.environ.get("COLUMNS") or 100

    # Connect to server and print response,
    # showing error message if unable to.
    try:
        # Connect to server
        r = requests.post(app_url, data)
    except requests.exceptions.RequestException:
        termcolor.cprint(wrap("Ack, there seems to be a bug in help50!"
                              "Please let sysadmins@cs50.harvard.edu know"
                              "with which error you need help!",
                              columns),
                         "yellow")
        sys.exit(1)
    else:
        # Overwrite previous line with spaces
        print("\r{}\r".format(" " * columns), end="")
        termcolor.cprint(wrap(r.text.encode("utf-8").decode("unicode_escape"),
                              columns),
                         "yellow")


def wrap(string, columns):
    """ Wraps a string to the specified number of columns,
        preserving blank lines.
    """
    return "\n".join(
        ("\n".join(textwrap.wrap(line, columns))
         for line in string.split("\n")))


def tee(command, *outputs):
    """Executes command, piping stdout and stderr to *outputs."""

    proc = subprocess.Popen(command, shell=True,
                            stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    while True:
        line = proc.stdout.readline()
        if not line:
            break
        for output in outputs:
            output.write(line.decode("utf-8"))


if __name__ == "__main__":
    main()
